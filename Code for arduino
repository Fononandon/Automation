#include <EEPROM.h>

#define MOTOR_PWM 9  // Motor speed control
#define MOTOR_IN1 7  // H-Bridge Input 1
#define MOTOR_IN2 8  // H-Bridge Input 2
#define MOISTURE_SENSOR 6 // Using digital pin for moisture sensor
#define EEPROM_START_ADDR 0
#define MOTOR_SPEED 255 // Medium speed (0-255)
#define MAX_LOGS 26  // Store last 26 logs
#define LOG_SIZE 32  // Increased size per log for clarity
#define LOG_INDEX_ADDR (MAX_LOGS * LOG_SIZE) // Address to store the log index

#define SENSOR_READ_INTERVAL 7200000 // 2 hours in milliseconds
#define SENSOR_ACTIVE_DURATION 30000 // Sensor stays active for 30 seconds
#define MOISTURE_LOW 50  // Below this, pump turns ON
#define MOISTURE_HIGH 70 // Above this, pump turns OFF

unsigned long lastSensorActivationTime = 0;
unsigned long lastPumpActivationTime = 0;
int logIndex = 0;

void readEEPROMLogs(); // Function declaration to ensure logs are read before anything else

void setup() {
    Serial.begin(9600);
    pinMode(MOTOR_PWM, OUTPUT);
    pinMode(MOTOR_IN1, OUTPUT);
    pinMode(MOTOR_IN2, OUTPUT);
    pinMode(MOISTURE_SENSOR, INPUT);
    
    logIndex = EEPROM.read(LOG_INDEX_ADDR);
    if (logIndex >= MAX_LOGS) logIndex = 0;
    
    readEEPROMLogs(); // Read stored logs before starting anything else
}

void loop() {
    unsigned long currentMillis = millis();

    // Activate sensor every 2 hours for 30 seconds
    if (currentMillis - lastSensorActivationTime >= SENSOR_READ_INTERVAL) {
        lastSensorActivationTime = currentMillis;
        delay(SENSOR_ACTIVE_DURATION);
        int moistureState = digitalRead(MOISTURE_SENSOR); // 1 = dry, 0 = wet

        Serial.print("Moisture Sensor State: ");
        Serial.println(moistureState ? "DRY" : "WET");

        if (moistureState == HIGH) {
            activatePump();  // Turn ON pump indefinitely if dry
        } else {
            deactivatePump(); // Ensure pump is off if moisture is sufficient
        }

        // Log to EEPROM
        String pumpStatus = (moistureState == HIGH) ? "ON" : "OFF";
        storeToEEPROM(moistureState, pumpStatus);
    }

    delay(1000); // Ensure real-time readings every second
}

void activatePump() {
    analogWrite(MOTOR_PWM, MOTOR_SPEED);
    digitalWrite(MOTOR_IN1, HIGH);
    digitalWrite(MOTOR_IN2, LOW);
}

void deactivatePump() {
    analogWrite(MOTOR_PWM, 0);
    digitalWrite(MOTOR_IN1, LOW);
    digitalWrite(MOTOR_IN2, LOW);
}

void storeToEEPROM(int moisture, String pumpStatus) {
    unsigned long currentTime = millis() / 60000; // Store time in minutes since startup
    String logEntry = String(currentTime) + " min - " + (moisture ? "DRY" : "WET") + " - " + pumpStatus;
    
    int startAddr = EEPROM_START_ADDR + (logIndex * LOG_SIZE);

    // Clear previous data
    for (int i = 0; i < LOG_SIZE; i++) {
        EEPROM.write(startAddr + i, ' ');
    }

    for (int i = 0; i < logEntry.length() && i < LOG_SIZE - 1; i++) {
        EEPROM.write(startAddr + i, logEntry[i]);
    }
    EEPROM.write(startAddr + LOG_SIZE - 1, '\0'); // Null terminator
    
    logIndex = (logIndex + 1) % MAX_LOGS; // Move to next log slot
    EEPROM.write(LOG_INDEX_ADDR, logIndex); // Store log index in EEPROM
}

void readEEPROMLogs() {
    Serial.println("Reading stored logs...");
    for (int i = 0; i < MAX_LOGS; i++) {
        int startAddr = EEPROM_START_ADDR + (i * LOG_SIZE);
        String logEntry = "";
        bool isValid = false;

        for (int j = 0; j < LOG_SIZE; j++) {
            char c = EEPROM.read(startAddr + j);
            if (c == '\0' || c == 255) break;
            if (c != ' ') isValid = true;
            logEntry += c;
        }

        if (isValid) {
            Serial.print("Log ");
            Serial.print(i);
            Serial.print(": ");
            Serial.println(logEntry);
        }
    }
}

void clearEEPROM() {
    for (int i = 0; i < MAX_LOGS * LOG_SIZE; i++) {
        EEPROM.write(EEPROM_START_ADDR + i, 255);
    }
    EEPROM.write(LOG_INDEX_ADDR, 0);
    logIndex = 0;
}
